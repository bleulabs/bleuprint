# Template Repository Cleanup
# This workflow automatically runs when someone creates a new repository from this template
# It removes development/template-specific files and customizes the repo for the new user

name: Template Cleanup
on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  template-cleanup:
    runs-on: ubuntu-latest
    if: github.event.repository.name != 'bleuprint' && github.repository != 'bleulabs/bleuprint'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get repository info
        id: repo-info
        run: |
          echo "owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "repo=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "full_name=${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: Remove template-specific files
        run: |
          echo "üßπ Cleaning up template-specific files..."
          
          # Remove development and testing files
          rm -rf .github/workflows/template-cleanup.yml
          rm -rf scripts/validate-nix.sh
          rm -rf scripts/test-suite.sh
          rm -rf scripts/setup-git-hooks.sh
          rm -rf justfile
          rm -rf flake.lock
          
          # Remove template documentation
          rm -rf docs/TEMPLATE_INFO.md
          rm -rf docs/CONTRIBUTING.md
          rm -rf docs/CODE_OF_CONDUCT.md
          rm -rf docs/SECURITY.md
          
          # Remove GitHub template files
          rm -rf .github/ISSUE_TEMPLATE/
          rm -rf .github/PULL_REQUEST_TEMPLATE/
          rm -rf .github/FUNDING.yml
          rm -rf .github/repository.yml
          
          # Keep only essential files
          echo "‚úÖ Removed template-specific files"

             - name: Customize configuration files
          run: |
           echo "üîß Customizing configuration for new repository..."
           
           # Update flake.nix with new repository name
           sed -i "s/bleuprint/${{ steps.repo-info.outputs.repo }}/g" flake.nix
           sed -i "s/bleulabs/${{ steps.repo-info.outputs.owner }}/g" flake.nix
           
           # Update _config.yml if it exists
           if [ -f "_config.yml" ]; then
             sed -i "s/bleuprint/${{ steps.repo-info.outputs.repo }}/g" _config.yml
             sed -i "s/bleulabs/${{ steps.repo-info.outputs.owner }}/g" _config.yml
             sed -i "s|https://bleulabs.github.io|https://${{ steps.repo-info.outputs.owner }}.github.io|g" _config.yml
             sed -i "s|/bleuprint|/${{ steps.repo-info.outputs.repo }}|g" _config.yml
           fi
           
           # Update install.sh
           sed -i "s/bleuprint/${{ steps.repo-info.outputs.repo }}/g" install.sh
           
           # Fix README placeholders
           sed -i "s/YOUR-USERNAME/${{ steps.repo-info.outputs.owner }}/g" README.md
           sed -i "s/YOUR-REPO/${{ steps.repo-info.outputs.repo }}/g" README.md
           
           echo "‚úÖ Updated configuration files"

             - name: Create personalized README
          run: |
           echo "üìù Creating personalized README..."
           
           cat > README.md << 'EOF'
           # ${{ steps.repo-info.outputs.repo }}
           
           > Modern macOS development environment powered by Nix-Darwin
           
           ## Quick Start
           
           ```bash
           # Clone and install
           git clone https://github.com/${{ steps.repo-info.outputs.full_name }}.git
           cd ${{ steps.repo-info.outputs.repo }}
           ./install.sh
           ```
           
           ## What's Included
           
           - **120+ modern developer tools** via Nix packages
           - **Homebrew integration** for GUI apps
           - **Shell configuration** (Zsh with Starship prompt)
           - **Git configuration** with modern tools (Delta, etc.)
           - **Development tools** (Docker, Kubernetes, etc.)
           - **Security-first** approach with reproducible builds
           
           ## Customization
           
           Edit the configuration files in `modules/` to customize your setup:
           
           - `modules/system/` - System-level packages and settings
           - `modules/home/` - User-level configuration and dotfiles
           - `modules/homebrew/` - GUI applications via Homebrew
           
           ## Documentation
           
           - [Setup Guide](docs/SETUP.md) - Detailed installation instructions
           - [Configuration Options](docs/CONFIG_OPTIONS.md) - Available customization options
           - [CLI Cheatsheet](docs/CLI_CHEATSHEET.md) - Quick reference for tools
           
           ## Requirements
           
           - macOS 12+ (Monterey or later)
           - Admin access for initial setup
           - Internet connection for downloading packages
           
           ## Contributing
           
           Contributions are welcome! Please feel free to submit a Pull Request.
           
           ## License
           
           MIT License - see [LICENSE](LICENSE) for details.
           
           ---
           
           <p align="center">
             Made with ‚ù§Ô∏è for the Mac development community<br>
             <a href="https://github.com/${{ steps.repo-info.outputs.full_name }}/stargazers">‚≠ê Star this repo</a> ‚Ä¢
             <a href="https://github.com/${{ steps.repo-info.outputs.full_name }}/issues">üêõ Report an issue</a> ‚Ä¢
             <a href="https://github.com/${{ steps.repo-info.outputs.full_name }}/discussions">üí¨ Discussions</a>
           </p>
           EOF
           
           echo "‚úÖ Created personalized README"

      - name: Update home configuration
        run: |
          echo "üè† Updating home configuration..."
          
          # Update git configuration with placeholder values
          sed -i 's/userName = "Test User";/userName = "Your Name";  # TODO: Update this/' modules/home/default.nix
          sed -i 's/userEmail = "test@example.com";/userEmail = "your.email@example.com";  # TODO: Update this/' modules/home/default.nix
          
          echo "‚úÖ Updated home configuration"

      - name: Create setup instructions
        run: |
          echo "üìã Creating setup instructions..."
          
          cat > FIRST_TIME_SETUP.md << 'EOF'
          # First Time Setup
          
          Welcome to your new macOS development environment! üéâ
          
          ## Before You Start
          
          1. **Update your personal information** in `modules/home/default.nix`:
             ```nix
             userName = "Your Actual Name";
             userEmail = "your.actual.email@example.com";
             ```
          
          2. **Review the installed tools** in `modules/system/` and customize as needed
          
          3. **Add your preferred GUI apps** in `modules/homebrew/apps.nix`
          
          ## Installation
          
          ```bash
          ./install.sh
          ```
          
          ## After Installation
          
          - Restart your terminal to load the new configuration
          - Run `which zsh` to verify the shell is updated
          - Try some modern tools: `eza`, `bat`, `fd`, `rg`
          
          ## Need Help?
          
          - Check the [documentation](docs/) folder
          - Review the [CLI cheatsheet](docs/CLI_CHEATSHEET.md)
          - Look at configuration examples in `modules/`
          
          ---
          
          **You can delete this file after setup is complete.**
          EOF
          
          echo "‚úÖ Created setup instructions"

      - name: Clean up git history and commit changes
        run: |
          echo "üîÑ Finalizing repository setup..."
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "Template Cleanup"
          
          # Add all changes
          git add -A
          
          # Commit the cleanup
          git commit -m "feat: initialize repository from template

          - Remove template-specific development files
          - Customize configuration for ${{ steps.repo-info.outputs.repo }}
          - Create personalized README and setup instructions
          - Update placeholder values in configuration
          
          Ready for customization and installation! üöÄ"
          
          # Push changes
          git push origin ${{ github.ref_name }}
          
          echo "‚úÖ Repository cleanup complete!"

      - name: Create initial issue with setup checklist
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "üöÄ Welcome! Complete your setup",
              body: `# Welcome to your new development environment!

            Your repository has been automatically customized from the Bleuprint template. Here's your setup checklist:

            ## üìã Setup Checklist

            - [ ] **Update personal info** in \`modules/home/default.nix\`
              - [ ] Change \`userName = "Your Name"\`
              - [ ] Change \`userEmail = "your.email@example.com"\`
            
            - [ ] **Customize your tools** (optional)
              - [ ] Review \`modules/system/\` packages
              - [ ] Add GUI apps in \`modules/homebrew/apps.nix\`
              - [ ] Modify shell aliases in \`modules/home/default.nix\`
            
            - [ ] **Install the configuration**
              \`\`\`bash
              ./install.sh
              \`\`\`
            
            - [ ] **Test your setup**
              - [ ] Restart terminal
              - [ ] Try modern tools: \`eza\`, \`bat\`, \`fd\`, \`rg\`
              - [ ] Verify git config: \`git config --list\`

            ## üìö Resources

            - [Setup Guide](docs/SETUP.md) - Detailed instructions
            - [Configuration Options](docs/CONFIG_OPTIONS.md) - Customization guide  
            - [CLI Cheatsheet](docs/CLI_CHEATSHEET.md) - Tool reference
            - [FIRST_TIME_SETUP.md](FIRST_TIME_SETUP.md) - Quick start guide

            ## üÜò Need Help?

            If you run into issues:
            1. Check the documentation in the \`docs/\` folder
            2. Review similar configurations in \`modules/\`
            3. Create a new issue with your question

            ---

            **Close this issue once you've completed your setup!** üéâ`
            })

      - name: Summary
        run: |
          echo "üéâ Template cleanup completed successfully!"
          echo ""
          echo "What was done:"
          echo "‚úÖ Removed template-specific development files"
          echo "‚úÖ Customized configuration for your repository"
          echo "‚úÖ Created personalized README and setup guide"
          echo "‚úÖ Updated placeholder values"
          echo "‚úÖ Created setup checklist issue"
          echo ""
          echo "Next steps for the user:"
          echo "1. Update personal information in modules/home/default.nix"
          echo "2. Run ./install.sh to apply the configuration"
          echo "3. Enjoy your modern development environment! üöÄ" 