#!/usr/bin/env bash
# Pre-push hook to prevent accidentally pushing sensitive information
# This hook can be customized or disabled by editing this file

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration - modify these patterns as needed
SENSITIVE_PATTERNS=(
    # Email patterns (common domains)
    '@gmail\.com'
    '@yahoo\.com'
    '@hotmail\.com'
    '@outlook\.com'
    '@icloud\.com'
    '@me\.com'
    '@mac\.com'
    # Work email patterns (add your company domains)
    '@company\.com'
    '@work\.com'
    # SSH key patterns
    'ssh-rsa AAAA'
    'ssh-ed25519 AAAA'
    'BEGIN OPENSSH PRIVATE KEY'
    'BEGIN RSA PRIVATE KEY'
    'BEGIN DSA PRIVATE KEY'
    # GPG key patterns
    'BEGIN PGP PRIVATE KEY'
    'BEGIN PGP PUBLIC KEY'
    # API keys and tokens
    'ghp_[a-zA-Z0-9]{36}'  # GitHub personal access tokens
    'github_pat_[a-zA-Z0-9_]{82}'  # GitHub fine-grained tokens
    'sk-[a-zA-Z0-9]{48}'   # OpenAI API keys
    'xoxb-[0-9]+-[0-9]+-[a-zA-Z0-9]+'  # Slack bot tokens
    # Common secret patterns
    'password.*=.*[^example]'
    'secret.*=.*[^example]'
    'token.*=.*[^example]'
    'key.*=.*[^example]'
    # Real names in Git config (you may want to customize this)
    'userName = "[A-Z][a-z]+ [A-Z][a-z]+"'
)

# Files to exclude from scanning (add more as needed)
EXCLUDE_PATTERNS=(
    '\.git/'
    '\.githooks/'
    'README\.md'
    'SETUP\.md'
    'CLI_CHEATSHEET\.md'
    '\.md$'
    '\.txt$'
    '/LICENSE'
    '\.env\.example$'  # Template file is safe
)

# Check if this is a public repository
check_public_repo() {
    local remote_url
    remote_url=$(git config --get remote.origin.url 2>/dev/null || echo "")
    
    if [[ "$remote_url" == *"github.com"* ]]; then
        # Extract owner/repo from URL
        local repo_path
        if [[ "$remote_url" == *"git@github.com:"* ]]; then
            repo_path=$(echo "$remote_url" | sed 's/git@github.com://' | sed 's/\.git$//')
        elif [[ "$remote_url" == *"https://github.com/"* ]]; then
            repo_path=$(echo "$remote_url" | sed 's|https://github.com/||' | sed 's/\.git$//')
        fi
        
        if [ -n "$repo_path" ]; then
            echo -e "${BLUE}üîç Checking repository visibility via GitHub API...${NC}"
            echo "Repository: $remote_url"
            
            # Try to detect if repo is private using GitHub API
            local api_response
            api_response=$(curl -s -w "%{http_code}" "https://api.github.com/repos/$repo_path" 2>/dev/null)
            local http_code="${api_response: -3}"
            
            if [ "$http_code" = "200" ]; then
                # Repository is accessible via public API
                local is_private
                local response_body="${api_response%???}"  # Remove last 3 chars (HTTP code)
                is_private=$(echo "$response_body" | grep -o '"private":[^,]*' | cut -d':' -f2 | tr -d ' ')
                
                if [ "$is_private" = "false" ]; then
                    echo -e "${YELLOW}üåç API confirmed: PUBLIC repository${NC}"
                    return 0  # Public repo
                elif [ "$is_private" = "true" ]; then
                    echo -e "${GREEN}üîí API confirmed: PRIVATE repository${NC}"
                    return 1  # Private repo
                fi
            elif [ "$http_code" = "404" ]; then
                # Repository not found via public API - likely private or doesn't exist
                echo -e "${GREEN}üîí API result: Repository appears to be PRIVATE or doesn't exist${NC}"
                echo -e "${BLUE}Using less restrictive checks for private repository${NC}"
                return 1  # Private repo
            elif [ "$http_code" = "403" ]; then
                # Rate limited or forbidden - could be private
                echo -e "${YELLOW}‚ö†Ô∏è  API rate limited or forbidden${NC}"
                echo -e "${BLUE}Cannot determine visibility - assuming PUBLIC for safety${NC}"
                return 0  # Assume public for safety
            fi
            
            # API failed - check environment variable as fallback
            if [ "$IS_PRIVATE_REPO" = "true" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  API detection failed, using environment variable${NC}"
                echo -e "${GREEN}üîí Environment variable indicates PRIVATE repository${NC}"
                return 1  # Private repo
            elif [ "$IS_PRIVATE_REPO" = "false" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  API detection failed, using environment variable${NC}"
                echo -e "${YELLOW}üåç Environment variable indicates PUBLIC repository${NC}"
                return 0  # Public repo
            fi
            
            # Final fallback: ask user
            echo -e "${YELLOW}‚ö†Ô∏è  Could not auto-detect repository visibility${NC}"
            echo ""
            read -p "Is this a PUBLIC repository? (y/n) [y]: " IS_PUBLIC
            IS_PUBLIC=${IS_PUBLIC:-y}
            
            if [[ "$IS_PUBLIC" =~ ^[Yy]$ ]]; then
                return 0  # Public repo
            else
                return 1  # Private repo
            fi
        fi
    fi
    
    # Not a GitHub repo - check environment variable
    if [ "$IS_PRIVATE_REPO" = "true" ]; then
        echo -e "${GREEN}üîí Non-GitHub repository marked as PRIVATE via environment${NC}"
        return 1  # Private repo
    fi
    
    # Not a GitHub repo or couldn't parse URL - assume public for safety
    echo -e "${YELLOW}‚ö†Ô∏è  Non-GitHub repository or unknown format${NC}"
    echo "Repository: $remote_url"
    echo -e "${BLUE}Assuming PUBLIC repository for maximum security${NC}"
    return 0
}

# Build exclude pattern for grep
build_exclude_pattern() {
    local pattern=""
    for exclude in "${EXCLUDE_PATTERNS[@]}"; do
        if [ -n "$pattern" ]; then
            pattern="$pattern|$exclude"
        else
            pattern="$exclude"
        fi
    done
    echo "$pattern"
}

# Scan for sensitive patterns
scan_for_sensitive_info() {
    local found_issues=false
    local exclude_pattern
    exclude_pattern=$(build_exclude_pattern)
    
    echo -e "${BLUE}üîç Scanning for potentially sensitive information...${NC}"
    echo ""
    
    # Get list of files being pushed
    local files_to_check
    files_to_check=$(git diff --cached --name-only --diff-filter=ACM)
    
    if [ -z "$files_to_check" ]; then
        files_to_check=$(git ls-files)
    fi
    
    # Filter out excluded files
    if [ -n "$exclude_pattern" ]; then
        files_to_check=$(echo "$files_to_check" | grep -vE "$exclude_pattern" || true)
    fi
    
    if [ -z "$files_to_check" ]; then
        echo -e "${GREEN}‚úì No files to scan${NC}"
        return 0
    fi
    
    # Check for .env files first (these should never be committed)
    local env_files
    env_files=$(echo "$files_to_check" | grep -E '\.env$|\.env\.local$' || true)
    
    if [ -n "$env_files" ]; then
        found_issues=true
        echo -e "${RED}üö® CRITICAL: Environment files detected!${NC}"
        echo "$env_files" | while read -r file; do
            if [ -n "$file" ]; then
                echo -e "   ${RED}‚Üí $file${NC}"
            fi
        done
        echo -e "${RED}Environment files contain sensitive information and should NEVER be committed!${NC}"
        echo ""
    fi
    
    # Scan each pattern
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        local matches
        matches=$(echo "$files_to_check" | xargs grep -l "$pattern" 2>/dev/null || true)
        
        if [ -n "$matches" ]; then
            found_issues=true
            echo -e "${RED}‚ö†Ô∏è  Found potentially sensitive pattern: ${NC}$pattern"
            echo "$matches" | while read -r file; do
                if [ -n "$file" ]; then
                    echo -e "   ${YELLOW}‚Üí $file${NC}"
                    # Show the actual line (with some context hidden)
                    grep -n "$pattern" "$file" | head -3 | sed 's/\(.*\):/   Line \1: /' | sed 's/@[a-zA-Z0-9.-]*\.[a-zA-Z]*/@ *****/g'
                fi
            done
            echo ""
        fi
    done
    
    if [ "$found_issues" = true ]; then
        return 1
    else
        echo -e "${GREEN}‚úì No sensitive patterns detected${NC}"
        return 0
    fi
}

# Show help for fixing issues
show_help() {
    echo -e "${BLUE}üí° How to fix these issues:${NC}"
    echo ""
    echo "1. Remove sensitive information from the files"
    echo "2. Use placeholder values like 'your@email.com' or 'Your Name'"
    echo "3. Move sensitive config to private files (add to .gitignore)"
    echo "4. Use environment variables for secrets"
    echo ""
    echo -e "${BLUE}To customize this hook:${NC}"
    echo "- Edit .githooks/pre-push to modify patterns"
    echo "- Add file patterns to EXCLUDE_PATTERNS"
    echo "- Disable by running: git config core.hooksPath ''"
    echo ""
    echo -e "${BLUE}To bypass this check (NOT recommended for public repos):${NC}"
    echo "git push --no-verify"
}

# Main execution
main() {
    echo -e "${BLUE}üîí Git Pre-Push Security Check${NC}"
    echo "================================="
    echo ""
    
    # Load environment variables if .env file exists
    if [ -f ".env" ]; then
        set -a
        source <(grep -v '^#' .env | grep -v '^$' | sed 's/^/export /' 2>/dev/null || true)
        set +a
    fi
    
    # Check if this looks like a public repository
    if ! check_public_repo; then
        echo -e "${GREEN}‚úì Private repository detected, skipping sensitive data check${NC}"
        exit 0
    fi
    
    echo -e "${YELLOW}üì¢ Public repository detected - scanning for sensitive information...${NC}"
    echo ""
    
    # Scan for sensitive information
    if scan_for_sensitive_info; then
        echo -e "${GREEN}‚úÖ Security check passed!${NC}"
        echo ""
        exit 0
    else
        echo -e "${RED}‚ùå Security check failed!${NC}"
        echo ""
        echo -e "${RED}üö® BLOCKED: Potentially sensitive information detected${NC}"
        echo ""
        show_help
        echo ""
        echo -e "${YELLOW}Push blocked to protect your privacy and security.${NC}"
        exit 1
    fi
}

# Run main function
main "$@" 